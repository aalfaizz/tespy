v0.3.5 - Someversion (Somemonth, Someday, Someyear)
+++++++++++++++++++++++++++++++++++++++++++++++++++

API Changes
###########
- In order to stick closer to the
  `PEP 8 style guide <https://www.python.org/dev/peps/pep-0008/>`_ we changed
  the names of all classes in TESPy to :code:`CamelCase` instead of
  :code:`snake_case` as the latter is reserved for methods. This means, you
  need to change your import like in the following examples:

  .. code-block:: python

      from tespy.components import Turbine, CombustionEngine
      from tespy.components import HeatExchanger, HeatExchangerSimple
      from tespy.connections import Connection
      from tespy.connections import Bus
      from tespy.connections import Ref
      from tespy.networks import Network
      from tespy.tools.characteristics import CharLine

  Along with this, we renamed the DataContainer class and subclasses.

  .. list-table:: New names for DataContainer classes
     :widths: 25 50
     :header-rows: 1

     * - old name
       - new name
     * - data_container
       - :py:class:`DataContainer <tespy.tools.data_containers.DataContainer>`
     * - dc_simple
       - :py:class:`DataContainerSimple <tespy.tools.data_containers.DataContainerSimple>`
     * - dc_cc
       - :py:class:`ComponentCharacteristics <tespy.tools.data_containers.ComponentCharacteristics>`
     * - dc_cm
       - :py:class:`ComponentCharacteristicMaps <tespy.tools.data_containers.ComponentCharacteristicMaps>`
     * - dc_cp
       - :py:class:`ComponentProperties <tespy.tools.data_containers.ComponentProperties>`
     * - dc_gcp
       - :py:class:`GroupedComponentProperties <tespy.tools.data_containers.GroupedComponentProperties>`
     * - dc_flu
       - :py:class:`FluidComposition <tespy.tools.data_containers.FluidComposition>`
     * - dc_prop
       - :py:class:`FluidProperties <tespy.tools.data_containers.FluidProperties>`

  The examples in the online documentation and the oemof_examples repository
  have been adjusted accordingly
  (`PR #237 <https://github.com/oemof/tespy/pull/237>`_).
- The definition of power and heat transfer in the
  :py:class:`tespy.components.combustion.combustion_engine.CombustionEngine`
  and the :py:class:`tespy.components.customs.orc_evaporator.ORCEvaporator`
  have been changed to negative as all values are energy output streams
  (`PR #215 <https://github.com/oemof/tespy/pull/215>`_).

New Features
############
- Add methods for exergy and entropy analyses of networks.
  Examples will follow (`PR #215 <https://github.com/oemof/tespy/pull/215>`_).
- Add a method :code:`get_plotting_data` to each component to export the input
  data required by FluProDia in order to generate the data required to display
  state changes in the components in a fluid property diagram. Each component
  returns a nested dictionary containing the respective data. E.g. the return
  value of a :code:`valve`:

  .. code-block:: bash

      {1: {
          'isoline_property': 'h',
          'isoline_value': 773.8970004397456,
          'isoline_value_end': 773.8970004397456,
          'starting_point_property': 'p',
          'starting_point_value': 51.164150405253665,
          'ending_point_property': 'p',
          'ending_point_value': 6.831002318100345
     }}

  The diagrams could look like this:

  .. figure:: api/_images/logph_diagram_states.svg
      :align: center

      Figure: logph diagram of NH3 with a simple heat pump cycle.

  .. figure:: api/_images/Ts_diagram_states.svg
      :align: center

      Figure: Ts diagram of NH3 with a simple heat pump cycle.

  For more information see the respective
  :ref:`documentation section <FluProDia_label>`
  (`PR #234 <https://github.com/oemof/tespy/pull/234>`_).
- Add a flag to deactivate calculation of all component equations in every
  iteration. This improves stability in some cases but may reduce calculation
  speed (`PR #226 <https://github.com/oemof/tespy/pull/226>`_). To deactivate
  simply specify on calling the
  :py:meth:`tespy.networks.network.Network.solve` method:

  .. code-block:: python

      mynetwork.solve('design', always_all_equations=False)
- Add a flag use cuda instead of numpy for matrix inversion. With cuda matrix
  inversion is outsourced to the graphics card. Using cuda additionally
  requires :code:`cupy` installed on your machine
  (`PR #226 <https://github.com/oemof/tespy/pull/226>`_). To activate simply
  specify on calling the
  :py:meth:`tespy.networks.network.Network.solve` method:

  .. code-block:: python

      mynetwork.solve('design', use_cuda=True)

  For more information on :code:`cupy` visit the online
  `documentation <https://docs.cupy.dev/en/stable/index.html>`_.

  .. note::

      In general, calculation time depends on many factors of your local
      machine. You should try and check, if using cuda or disabling always all
      equations benefits your calculation times individually.

Documentation
#############
- Fix several broken links and typos
  (`PR #236 <https://github.com/oemof/tespy/pull/236>`_).

Bug Fixes
#########
- Fix a bug, where checking if parameters are numeric in the :code:`set_attr()`
  methods of classes connection, bus and component failed in case special numpy
  number types were passed
  (`#daa1ecb <https://github.com/oemof/tespy/commit/daa1ecb>`_,
  `#b420396 <https://github.com/oemof/tespy/commit/b420396>`_).

Other Changes
#############
.. list-table:: Adjust value limits for some component parameters
   :widths: 25 25 50
   :header-rows: 1

   * - component
     - parameter
     - new value
   * - heat_exchanger_simple
     - :code:`zeta.max_val`
     - 1e15
   * -
     - :code:`ks.max_val` (for Hazen-Williams equation)
     - 200
   * - valve
     - :code:`zeta.max_val`
     - 1e15

- On some machines the coloring of the results printout does not work and
  displaces the table in an ugly way. To avoid this, the coloring is changed to
  optional (`PR #229 <https://github.com/oemof/tespy/pull/229>`_). Use the
  following line for non-colored printouts:

  .. code-block:: python

      mynetwork.print_results(colored=False)

- An error message is raised in case the user specifies a fluid vector
  containing fluids, that are not part of the network's fluid list
  (`PR #233 <https://github.com/oemof/tespy/pull/233>`_).
- For improved convergence stability of the methods
  :py:meth:`tespy.components.heat_exchangers.heat_exchanger_simple.HeatExchangerSimple.kA_func` and
  :py:meth:`tespy.components.heat_exchangers.heat_exchanger_simple.HeatExchangerSimple.kA_char_func`,
  the logarithmic temperature difference is calculated based on the mean
  temperature difference between ambient and inlet and outlet temperature, if
  the terminal temperature differences do not have the same sign
  (`PR #225 <https://github.com/oemof/tespy/pull/225>`_).
- An understandable error message is raised in case the user misses out on
  fluids required by components of class CombustionChamber or CombustionEngine
  (`PR #242 <https://github.com/oemof/tespy/pull/242>`_).

Contributors
############
- Francesco Witte (`@fwitte <https://github.com/fwitte>`_)
- `@juliusmeier <https://github.com/juliusmeier>`_
- `@jbueck <https://github.com/jbueck>`_
- Markus Brandt (`@MarBrandt <https://github.com/MarBrandt>`_)
